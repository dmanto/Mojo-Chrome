=head1 NAME

Mojo-Chrome - A Mojo interface to Chrome DevTools Protocol

=head1 DESCRIPTION

L<Mojo::Chrome> is an interface to the Chrome DevTools Protocol which allows interaction with a (possibly headless) chrome instance.
While L<Mojo::Chrome> is primarily intended as a backbone for L<Test::Mojo::Role::Chrome>, this is not its only purpose.

Communication is bidirectional and asynchronous via an internal websocket.
Both request/response and push-events are commonplace, though this module does its best to simplify things.

This module is the spiritual successor to L<Mojo::Phantom> which interfaced with the headless phantomjs application.
That project was abandoned after the headless chrome functionality was announced.

L<Mojo::Phantom> had many short-cuts that were intended to smooth out the experience since communication was essentially unidirectional after the page load and the process or at least the page state was ephemeral.
Because of the robust communication afforded by the Chrome DevTools Protocol many of those short-cuts will not be replicated for C<Mojo::Chome>.
However with the increased power the author suspects that new short-cuts will be desirable, suggestions are welcome.

=head1 CAVEATS

This module is new and changes may occur.
High level functionality should be fairly stable.

The protocol itself is fairly new and largely undocumented, especially in usage documentation.
If this module skews from the protocol in newer versions of chrome please alert the author via the bug tracker.
Incompatibilites can hopefully be smoothed out in the module however where this isn't possible the author intends to target newer versions of chrome rather than support a long tail of chrome version.

=head1 CONNECTING AND SPAWNING

This module attempts to connect and/or reconnect to Chrome's DevTools Protocol and even spawn an instance of Chrome so as to make that as seemless as possible to the user.
Any method that sends a command will first check for a connection and if it doesn't exist attempt to create one.
Further if a connection can't be made or if a port to connect on hasn't been specified it will spawn a new instance.
In the case that no port was specified a random free port will be used.
(Note that an additional randomly selected free port is used during startup and is then dropped once the startup is complete.)

All this should be as transparent and "do what I mean" as possible.

=head1 EVENTS

L<Mojo::Chrome> inherits all of the events from L<Mojo::EventEmitter>.
Further it emits events that arrive from the protocol as they arrive.
Per the protocol most events are disabled initially, though some methods will enable and subscribe to events as a matter of course.

Eventually this documentation might suggest best practices or contain other functionality to moderate events.
For the time being simply consider that fact, especially when disabling protocol events.

=head1 ATTRIBUTES

L<Mojo::Chrome> inherits all of the attributes from L<Mojo::EventEmitter> and implements the following new ones.

=head2 base

A base url used to make relative urls absolute.
Must be an instance of L<Mojo::URL> or api compatible class.

=head2 chrome_path

Path to the chrome executable.
Default is to use L<Mojo::Chrome::Util/chrome_executable> to discover it.

=head2 chrome_options

An array reference containing additional command line arguments to pass when executing chrome.
The default includes C<--headless>, it does not include C<--disable-gpu> thought that is a common usage.

=head2 host

The IP address of the host running chrome.
By default this is C<127.0.0.1>, namely the current host.

=head2 port

The port of the chrome process.
The default is to open an unused port.
This should be specified if a remote chrome instance (see C</host>).

=head2 tx

The L<Mojo::Transaction> object maintaining the websocket connection to chrome.

=head2 ua

The L<Mojo::UserAgent> object used to open the connection to chrome if necessary.

=head1 CLASS METHODS

=head2 detect_chrome_executable

  my $path = Mojo::Chrome->detect_chrome_executable;

Returns the path of the chrome executable to be used.
The following heuristic is used:

=over

=item *

If the environment variable C<MOJO_CHROME_EXECUTABLE> is set that is immediately returned, no check is performed.

=item *

If an executable file named C<google-chrome> exists in your PATH (as determined by L<IPC::Cmd/can_run>) and is executable, then that path is returned.

=item *

If the system is C<darwin> (i.e. Mac), then if C</Applications/Google Chrome.app/Contents/MacOS/Google Chrome> exists and is executable, then that path is returned.

=item *

Otherwise returns C<undef>.

=back

=head1 METHODS

L<Mojo::Chrome> inherits all of the methods from L<Mojo::EventEmitter> and implements the following new ones.

=head2 evaluate

  $chrome->evaluate('JS', sub { my ($chrome, $error, $value) = @_; ... });
    Array.from(document.getElementsByTagName('p')).map(e => e.innerText);
  JS

Evaluate a javascript snippet and return the result of the last statement.
If passed a hash reference this is assumed to be arguments passed to DevTools' L<Runtime.evaluate|https://chromedevtools.github.io/devtools-protocol/tot/Runtime/#method-evaluate>.
Otherwise the value is assumed to be the expression (and the C<returnByValue> option will be set to true).
The callback will receive the invocant, any error, then the value of the last evaluated statement.

Note that other complex behaviors are possible when explicitly passing your own arguments, so please investigate those if this behavior seems limiting.

=head2 load_page

  $chrome->load_page($url, sub { my ($chrome, $error) = @_; ... });

Request a page and load the result, evaluating any initial javascript in the process.
This subscribes to L<Page|https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-enable> events and then requests the page with L<Page.naviate|https://chromedevtools.github.io/devtools-protocol/tot/Page/#method-navigate>.
It then invokes the callback when the appropriate L<Page.frameStoppedLoading|https://chromedevtools.github.io/devtools-protocol/tot/Page/#event-frameStoppedLoading> event is caught.

If passed a hash reference this is assumed to the the arguments passed to the C<Page.navigate> method.
Otherwise the value is assumed to the be url to load.
If the url (given either way) is relative, it will be made absolute using the L</base> url.

=head2 send_command

  $chrome->send_command($method, $params, sub { my ($chrome, $error, $result) = @_; ... });

A lower level method to send a command via the protocol.
The arguments are a method and a hash reference of parameters.
If given, a callback will be invoked when a response is received (N.B. issuing ids and watching for responses is handled transparently internally).
The callback is passed the invocant, any error, and the result.

This method lets you interact with the protocol and while it does simplify some of that process it is still quite low level.

=head1 PROTOCOL DOCUMENTATION

=over

=item L<https://chromedevtools.github.io/devtools-protocol>

=item L<https://developers.google.com/web/updates/2017/04/headless-chrome>

=back

=head1 SOURCE REPOSITORY

L<http://github.com/jberger/Mojo-Chrome>

=head1 AUTHOR

Joel Berger, E<lt>joel.a.berger@gmail.comE<gt>

=head1 CONTRIBUTORS

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2017 by L</AUTHOR> and L</CONTRIBUTORS>.
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
