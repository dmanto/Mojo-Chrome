.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Mojo::Role::Chrome 3pm"
.TH Test::Mojo::Role::Chrome 3pm "2018-09-26" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Mojo::Role::Chrome \- Chrome for your testing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojolicious::Lite;
\&
\&  use Test::More;
\&
\&  any \*(Aq/\*(Aq => \*(Aqindex\*(Aq;
\&
\&  my $t = Test::Mojo\->with_roles(\*(Aq+Chrome\*(Aq)\->new;
\&
\&  $t\->chrome_load_ok(\*(Aq/\*(Aq)
\&    \->chrome_evaluate_ok(q[document.getElementById(\*(Aqname\*(Aq).innerHTML])
\&    \->chrome_result_is(\*(AqBender\*(Aq);
\&
\&  done_testing;
\&
\&  _\|_DATA_\|_
\&
\&  @@ index.html.ep
\&
\&  <!DOCTYPE html>
\&  <html>
\&    <head></head>
\&    <body>
\&      <p id="name">Leela</p>
\&      <script>
\&        (function(){ document.getElementById(\*(Aqname\*(Aq).innerHTML = \*(AqBender\*(Aq })();
\&      </script>
\&    </body>
\&  </html>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Test::Mojo::Role::Chrome adds the ability to test front-end behavior to your Test::Mojo instance.
It uses Mojo::Chrome to interface to the Chrome DevTools Protocol as its backbone.
Note that this module can also test non-Mojolicious \s-1PSGI\s0 applications via Test::Mojo::Role::PSGI.
.PP
This module is the spiritual successor to Test::Mojo::Role::Phantom which interfaced with the headless phantomjs application.
That project was abandoned after the headless chrome functionality was announced.
.PP
Test::Mojo::Role::Phantom and Mojo::Phantom had many short-cuts that were intended to smooth out the experience since communication was essentially unidirectional after the page load and the process or at least the page state was ephemeral.
Because of the robust communication afforded by the Chrome DevTools Protocol many of those short-cuts will not be replicated for \f(CW\*(C`Test::Mojo::Role::Chome\*(C'\fR.
However with the increased power the author suspects that new short-cuts will be desirable, suggestions are welcome.
.PP
As this module is new as is the protocol, please familiarize yourself with the \*(L"Caveats\*(R" in Mojo::Chrome before using.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
Test::Mojo::Role::Chrome composes the following attributes into the consuming class.
.SS "chrome"
.IX Subsection "chrome"
The instance of Mojo::Chrome used to for testing.
Defaults to a new instance with the \*(L"base\*(R" in Mojo::Chrome set appropriately to address the tested application's server on relative requests.
.SS "chrome_result"
.IX Subsection "chrome_result"
The result of the previous call to \*(L"chrome_evaluate_ok\*(R".
.SS "wait_for_js_done"
.IX Subsection "wait_for_js_done"
.Vb 2
\&  my $wait_seconds = $t\->wait_for_js_done;
\&  $t               = $t\->wait_for_js_done(5);
.Ve
.PP
Maximum amount of time in seconds to wait for javascript to
modify required selector value. Used only on wait_for_xx methods.
If the expected value (ok result) is obtained before, it returns
inmediatelly without further delaying test execution.
Default value is 3 seconds.
.SH "METHODS"
.IX Header "METHODS"
Test::Mojo::Role::Chrome composes the following methods into the consuming class.
.SS "chrome_load_ok"
.IX Subsection "chrome_load_ok"
.Vb 1
\&  $t = $t\->chrome_load_ok($url, $description);
.Ve
.PP
Load a page, successful if the page loads.
The first arugment can be a url/string or a hash reference as described in \*(L"load_page\*(R" in Mojo::Chome.
An optional description can be passed as the second argument.
.SS "chrome_evaluate_ok"
.IX Subsection "chrome_evaluate_ok"
.Vb 1
\&  $t = $t\->chrome_evaluate_ok($js, $description);
.Ve
.PP
Evaluate a javascript snippet, successful if the evaluation succeeds.
The result is stored in \*(L"chrome_result\*(R".
The first argument can be a javascript snippet or a hash reference as described in \*(L"evaluate\*(R" in Mojo::Chrome.
An optional description can be passed as the second argument.
.SS "chrome_result_is"
.IX Subsection "chrome_result_is"
.Vb 4
\&  $t = $t\->chrome_result_is($expected);
\&  $t = $t\->chrome_result_is($pointer, $expected);
\&  $t = $t\->chrome_result_is($pointer, $expected, $description);
\&  $t = $t\->chrome_result_is(\*(Aq\*(Aq, $expected, $description);
.Ve
.PP
Check a result, gotten from \*(L"chrome_evaluate_ok\*(R" and stored in \*(L"chrome_result\*(R", using \*(L"is_deeply\*(R" in Test::More.
Takes an optional \s-1JSON\s0 Pointer, data to compare against, and an optional description.
If two arguments are passed those are assumed to be a pointer and comparison data, to give a description without a pointer, use the root pointer \f(CW\*(Aq\*(Aq\fR.
.SS "chrome_result_like"
.IX Subsection "chrome_result_like"
.Vb 4
\&  $t = $t\->chrome_result_like($expected);
\&  $t = $t\->chrome_result_like($pointer, $regex);
\&  $t = $t\->chrome_result_like($pointer, $regex, $description);
\&  $t = $t\->chrome_result_like(\*(Aq\*(Aq, $regex, $description);
.Ve
.PP
Check a result, gotten from \*(L"chrome_evaluate_ok\*(R" and stored in \*(L"chrome_result\*(R", using \*(L"like\*(R" in Test::More.
Takes an optional \s-1JSON\s0 Pointer, regex (\f(CW\*(C`qr//\*(C'\fR) to compare against, and an optional description.
If two arguments are passed those are assumed to be a pointer and a regex, to give a description without a pointer, use the root pointer \f(CW\*(Aq\*(Aq\fR.
.SS "wait_for_text_is"
.IX Subsection "wait_for_text_is"
.Vb 2
\&  $t = $t\->chrome_result_like($selected, $expected);
\&  $t = $t\->chrome_result_like($selected, $expected, $description);
.Ve
.PP
Poll chrome browser until context (innerText) of \f(CW$selector\fR is equal to \f(CW$expected\fR (success case), or a timeout of
\&\*(L"wait_for_js_done\*(R" seconds expires (error case).
The result is stored in \*(L"chrome_result\*(R" (will be the same as \f(CW$expected\fR if the test succeds).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "Test::Mojo" 4
.IX Item "Test::Mojo"
.PD 0
.IP "Test::Mojo::Role::Selenium" 4
.IX Item "Test::Mojo::Role::Selenium"
.PD
Another front-end test system for the Test::Mojo system
.IP "Test::Mojo::Role::PSGI" 4
.IX Item "Test::Mojo::Role::PSGI"
Test non-Mojolicious \s-1PSGI\s0 applications using the Test::Mojo system
